package com.jue.java.learntest.offeronline.T_PRACTICE_20200325_A;

import java.util.Arrays;
import java.util.Scanner;

/**
 * @author JUE
 * @date 2020/3/25
 * @note 0 error(s), 0 warning(s)
 * url https://www.nowcoder.com/practice/5f29c72b1ae14d92b9c3fa03a037ac5f?tpId=90&tqId=30776&tPage=1&rp=1&ru=/ta/2018test&qru=/ta/2018test/question-ranking
 * title  给定一个无序数组，包含正数、负数和0，要求从中找出3个数的乘积，使得乘积最大，要求时间复杂度：O(n)，空间复杂度：O(1)
 **/
public class Main {
//    String str = "-1326 5244 2770 -5595 -5709 1188 -3842 646 60 -5145 618 -900 4928 3485 2376 -6923 -5501 2083 20 1071 1517 6623 -4467 152 -5236 -2476 -3872 3296 3917 -976 1738 3883 -2292 -5821 1571 1582 1783 5354 -6847 -6375 -3351 4179 -6638 -1994 4470 5237 -2681 5040 1061 6796 -6009 3014 5208 -6651 -1170 -3241 6453 -5913 -3921 -2873 3688 -5537 -4149 5806 2808 -761 2093 908 4007 6817 3959 3491 -3079 3790 6196 -3939 3030 -4244 5386 1785 4637 -560 2016 3642 2350 -2933 -678 407 -1387 6324 1058 4449 -765 -343 4255 -6146 4754 5981 -4063 -5634 2613 -706 -1059 -5152 6602 -6781 -2059 -5742 4125 -6708 -3397 4641 1281 -6799 -5697 5364 -5645 1109 -3114 186 4506 -1828 6189 -1333 3601 -1566 387 -644 3208 -4501 2306 2929 5825 -4193 -5082 -6349 -4394 5276 -3868 -5032 4969 7 -3597 -2232 154 -6886 5852 4882 779 -1608 6089 -2573 2718 4943 6626 1083 -5216 -6140 -658 346 -2020 -6012 6067 -2212 2324 -6398 5837 -1093 5116 -2232 3068 2322 5497 -3694 3754 -2860 -241 2371 2946 -5641 4408 -469 -2751 1677 -4831 4889 724 1480 -432 853 -157 857 -6477 463 -6557 -4645 4534 6780 -6319 5237 1224 -1977 -2523 -5680 4513 3332 5605 1152 4934 3829 1859 -4032 2225 3595 847 -3150 -3795 5759 -376 3648 2853 857 -2304 -6491 -8 -922 3510 -6805 313 5583 -3652 -2081 1859 -2285 -1248 6173 4678 788 -2049 -2347 3026 -1701 5019 4764 2555 -2672 -351 5205 -1537 247 -1479 -5707 59 1820 -5156 3931 2816 -5739 554 -6001 5160 4896 -2498 2312 -4992 -2941 430 -798 754 1006 -763 257 -4704 6651 3755 -3351 5244 -268 -3623 -3167 2563 4447 3072 -5939 1823 -5323 5537 640 2912 2726 6736 5335 693 -2314 3329 -3802 6080 -1225 -1753 -383 6498 3223 584 4038 -5945 1667 -4186 1332 4432 5026 1513 -6336 -3780 -4289 -5017 2012 974 2866 6524 5660 2841 3601 5736 -3171 -6270 -4 5703 3264 5295 4162 -2491 6761 -4725 1043 3948 6336 -3287 3167 4771 -5708 5864 -6175 -5206 1034 -775 -1192 1677 -1220 -3535 2242 -5243 2159 -312 157 1185 -6308 -5943 5261 -3439 -686 -6748 6342 -6046 -6577 3547 2915 4009 -1849 -1317 5110 -2452 513 -1594 671 3677 294 6359 -1655 3889 1711 4126 457 1985 1771 -3721 4462 4456 4786 3065 1714 -954 -6776 -1079 -1373 6780 5981 4699 -1465 6653 -1657 -6289 6201 -1342 2065 -3846 3316 5455 -2340 6893 4927 3894 -1252 6166 -559 5045 5947 -5350 -4167 -4223 -3093 95 4053 -1036 6399 -651 -6406 4023 -470 6828 1797 5070 6229 -6657 3726 -2139 1506 4297 -2825 5499 -3641 -429 71 86 2251 5524 2703 242 -1523 -795 -5837 2078 2072 -2298 -2846 3585 -1395 -1860 -4683 -4676 -2396 -6190 1003 1090 -3816 -572 -3338 5995 -3092 5914 -4768 -2555 5644 6644 -1020 -1044 2817 1636 5687 6346 -6853 3791 2516 2540 -5212 6476 -701 5366 -1503 2752 505 -1602 -1726 763 1838 -1473 -722 -3626 2466 4406 -5626 -5137 -5342 6809 -6729 1430 -4348 3432 -969 1297 3330 742 -4199 5259 -4992 -1267 -2843 5373 -1994 -3389 3728 -407 -6149 -4502 1586 5192 473 -1540 -5092 3707 -480 3985 -3094 -2698 1301 -4892 2701 1832 2811 3667 3233 -384 -1556 5211 310 -2793 5441 2895 -6781 -6189 -4380 -5982 -1169 -5656 364 3339 2844 2278 3937 -5990 3932 5233 -2097 3965 -953 1043 2388 59 -56 -6151 -5717 -103 -3271 -1773 2733 1319 6775 -3304 -4830 2410 781 5155 783 3827 4322 -3009 1911 3417 -4487 1092 -3832 6442 3039 6202 -4141 -5130 -1826 -2712 -3103 4666 4207 1484 -2033 -1047 -4519 -1947 1677 -3204 399 169 2155 5735 -1486 6195 4596 1615 -4252 1591 444 -4138 3344 -3880 -4166 -4327 -3025 -4648 5792 2084 -6304 4187 -1047 5262 5345 -5528 -3204 4217 -1874 1267 2984 407 -503 4236 -5671 2545 -6446 -1510 2337 843 -3020 -3738 835 3455 -494 -6374 994 1374 -1390 4230 -4362 6824 -3905 -5037 -5789 2207 3626 -2562 -4510 481 -4599 85 1561 1137 -4102 6623 -1083 1991 -4954 -5588 1271 -136 4356 -1756 -3196 -627 -1191 -3563 1119 -6803 -3361 -4029 -375 -3254 -1396 223 -175 -119 -6464 4192 -485 3367 6853 323 -6380 2876 -416 -3881 -3127 1872 -2856 3829 -6447 5092 6055 -100 5064 6410 -5348 5497 -4563 5210 6002 -4588 -4894 -447 1044 -3259 -5687 -6553 6228 5026 151 243 4473 3378 -2317 -6409 6971 596 645 3665 -1328 -4221 -3897 -1762 5552 6315 -2103 6383 -1317 -6108 -1776 -6859 518 4272 5513 5059 3121 -2397 -1468 -4994 4767 6239 -3105 -4815 -5782 2782 -2137 1069 4753 4442 -2243 4297 -13 -4216 -37 -5406 -1167 4467 1635 2570 -863 1128 -5993 -5504 -3685 -901 4310 -51 -3314 5012 -6089 -3880 -1679 2786 -6220 794 -2361 -5669 537 2053 6419 -2129 4114 -1059 -6206 -5695 -1648 -3351 -5185 -1730 -2080 2303 576 -5543 -6977 -754 -5607 5277 6969 -3574 6543 1072 -1649 6842 4715 -6014 783 -751 -1572 2978 -476 3597 -5197 -6662 -1474 -5440 -157 -3190 6326 6873 2877 4977 46 2831 -4732 -4958 4044 -2647 5811 -4468 1127 -2584 -2636 5322 5194 -6196 4295 4220 1709 -1185 -181 3121 -3873 -4295 3732 6632 -4791 -4581 1173 -2030 2177 -854 4620 -432 3729 -3706 511 3930 -4776 -3187 867 1035 -3196 -4061 -1407 -4576 3576 -5901 -5218 2883 -3731 -545 511 6866 6662 1365 -2453 -6111 -5108 5123 -6839 -6150 -3599 3049 4265 1302 865 3120 6875 -5888 4511 2958 -5457 5390 2699 -1654 2016 -796 -213 -6022 -3772 221 -6023 1941 135 5124 -4151 -6096 -852 2510 3291 -6653 2213 4568 -3204 1984 -2206 2647 1899 787 5424 4572 -6711 -4710 -6473 3675 -2736 -5807 3001 -5041 4498 -2090 1416 -1301 -3831 -5017 -5592 6597 2888 -2819 502 4330 4684 2073 -6665 -6520 -419 -5778 214 -2777 -2128 -4497 6785 -5728 -4726 -5035 1617 -3960 589 6765 -4061 3908 4755 -1185 3036 1567 4473 -3825 624 1121 -5707 -1756 -1185 -3263 668 3616 -1292 -1347 -2065 5877 3009 6649 -4475 -2560 -5077 -4894 4311 -3570 2896 -4087 4866 6594 -2696 -3397 5202 1414 524 -2358 2794 -23 -4642 5168 -3832 2177 4647 -1083 -6792 -2762 704 5895 2024 6760 -6308 -3311 5753 -3815 -1012 4553 -2242 3008 -1248 3179 -2551 48 -3035 2112 -2367 -2308 -6722 -4670 -348 -3428 5764 -5321 2557 -4126 736 5339 -807 -40 6722 3124 -4658 5824 -6579 -6407 6831 5222 -1823 5861 -2027 -1712 -6234 -716 -6285 682 1674 -3732 -4762 -5131 -5981 5079 -866 5765 -4592 5558 -6043 6293 -6858 -2074 157 -3519 -1719 1636 -6415 2265 2602 2313 4704 -3648 4082 -6025 -5866 -6131 5105 6631 572 3079 -2412 -5403 -3584 -1511 -5789 2983 5430 2934 6386 -2916 -223 4359 -89 6492 -5871 -3655 -3064 4387 -3964 2037 4272 -1322 1171 1874 -6510 2380 4952 -6312 1029 4129 470 4332 5084 1088 3738 2557 6036 961 3739 -1526 -6431 6039 6238 -538 -6130 4016 1184 -1561 6661 3047 1124 6600 4350 -1314 -3858 -5688 4147 6864 -3283 -3288 4297 2019 -544 -426 3505 2270 -5083 -101 -6420 -3693 5237 1955 4360 -3850 -5666 -5639 -2474 -1351 -1217 -5095 -1778 4840 -4253 -6608 -882 -5299 -6614 1984 3072 -108 -6400 -1930 5317 -6014 -4268 -4924 -619 -51 -4904 -4265 1923 -6066 -4204 -4208 2123 832 -6913 -2869 5966 -4015 -6401 -273 -4486 5817 4568 -1985 -6788 -4777 -167 -786 4997 -5272 -4996 -524 5613 -396 -1977 1327 3500 -1586 1756 1854 980 3918 -4342 -6326 -2090 -665 1751 -5946 863 -6521 -5405 6488 237 -726 622 2897 6754 -2856 -82 -4211 2376 -1893 -2835 2282 925 -4340 -3822 131 6491 -4898 2844 -790 -5042 -4132 4517 -5895 4928 -252 2562 6182 -5817 5293 -6110 -3757 4353 -5080 3196 6029 3885 3796 -74 4365 -5651 -2902 4235 -5288 -1102 2154 -5036 -2917 -5027 -3231 -5134 1269 4732 6200 -2348 -3988 -69 2344 1112 4799 -499 -1897 -3169 -2831 4081 1691 -1516 2127 6616 1097 -2540 1254 -608 -6115 -1131 -4188 1427 1053 -5775 -6966 -1912 -6849 4787 -4937 -6422 -575 1088 -121 6884 -6470 1918 -28 -43";

    public static void main(String[] args) {
//        System.out.println((new Main()).str.split(" ").length);
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            int len = scanner.nextInt();
            long[] array = new long[5]; // 最小 / 第二小 / 第三大 / 第二大 / 最大
            int i = 0;
            if (len <= 2) {
                System.out.println(0);
            } else if (len <= 5) {
                array = new long[len];
                while (i < len) {
                    array[i++] = scanner.nextLong();
                }
                // 排序
                Arrays.sort(array);
                System.out.println((new Main()).function(array, len));
            } else {
                while (i < 5) {
                    array[i++] = scanner.nextLong();
                }
                // 排序
                Arrays.sort(array);
                while (i < len) {
                    long temp = scanner.nextLong();
                    if (temp > array[4]) {
                        array[2] = array[3];
                        array[3] = array[4];
                        array[4] = temp;
                    } else if (temp > array[3]) {
                        array[2] = array[3];
                        array[3] = temp;
                    } else if (temp > array[2]) {
                        array[2] = temp;
                    } else if (temp < array[0]) {
                        array[1] = array[0];
                        array[0] = temp;
                    } else if (temp < array[1]) {
                        array[1] = temp;
                    }
                    i++;
                }

                System.out.println(Math.max(array[0] * array[1] * array[4], array[2] * array[3] * array[4]));
            }
        }
    }

    public long function(long[] array, int len) {
        if (array[len - 1] > 0 && array[len - 2] < 0 || array[len - 3] < 0 || array[0] * array[1] > array[len - 1] * array[len - 2]) {
            return array[0] * array[1] * array[len - 1];
        } else {
            return array[len - 3] * array[len - 2] * array[len - 1];
        }
    }
}
